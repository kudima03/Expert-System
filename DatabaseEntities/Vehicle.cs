//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан по шаблону.
//
//     Изменения, вносимые в этот файл вручную, могут привести к непредвиденной работе приложения.
//     Изменения, вносимые в этот файл вручную, будут перезаписаны при повторном создании кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DatabaseEntities
{
    using System;
    using System.Collections.Generic;
    using System.IO;
    using System.Runtime.Serialization.Formatters.Binary;
    using System.Drawing;
    using System.Configuration;
    using System.ComponentModel.DataAnnotations.Schema;

    [Serializable]
    public partial class Vehicle : IEquatable<Vehicle>, IRateable
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Vehicle()
        {
            this.Rate = new HashSet<Rate>();
            Dealer = "empty";
            Model = "empty";
            Colour = "empty";
            RegistrationNumber = "empty";
            Photo = new Bitmap(ConfigurationManager.AppSettings.Get("defaultPhotoPath"));
        }
    
        public int Id { get; set; }

        public string Dealer { get; set; }

        public string Model { get; set; }

        public string Colour { get; set; }

        public string RegistrationNumber { get; set; }

        public double TotalRate { get; set; }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Rate> Rate { get; set; }

        public Bitmap Photo { get; set; }

        public byte[] BinaryPhoto
        {
            get
            {
                using (MemoryStream ms = new MemoryStream())
                {
                    BinaryFormatter binaryFormatter = new BinaryFormatter();
                    binaryFormatter.Serialize(ms, Photo);
                    return ms.ToArray();
                }
            }
            set
            {
                using (MemoryStream ms = new MemoryStream(value))
                {
                    BinaryFormatter binaryFormatter = new BinaryFormatter();
                    Photo = binaryFormatter.Deserialize(ms) as Bitmap;
                }
            }
        }

        public Vehicle(string dealer, string model, string colour, string number) : this()
        {
            Dealer = dealer;
            Model = model;
            Colour = colour;
            RegistrationNumber = number;
        }

        public Vehicle(Vehicle other)
        {
            Id = other.Id;
            Dealer = other.Dealer;
            Model = other.Model;
            Colour = other.Colour;
            RegistrationNumber = other.RegistrationNumber;
            TotalRate = other.TotalRate;
            Photo = other.Photo;
        }

        public bool Equals(Vehicle other)
        {
            return Dealer == other.Dealer && Model == other.Model && Colour == other.Colour
                && RegistrationNumber == other.RegistrationNumber && TotalRate == other.TotalRate;
        }
    }
}
